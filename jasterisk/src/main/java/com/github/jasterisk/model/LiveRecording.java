/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.jasterisk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A recording that is in progress
 */
@ApiModel(description = "A recording that is in progress")

public class LiveRecording {
  @SerializedName("name")
  private String name = null;

  @SerializedName("format")
  private String format = null;

  @SerializedName("target_uri")
  private String targetUri = null;

  @SerializedName("state")
  private String state = null;

  @SerializedName("duration")
  private Integer duration = null;

  @SerializedName("talking_duration")
  private Integer talkingDuration = null;

  @SerializedName("silence_duration")
  private Integer silenceDuration = null;

  @SerializedName("cause")
  private String cause = null;

  public LiveRecording name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Base name for the recording
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Base name for the recording")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public LiveRecording format(String format) {
    this.format = format;
    return this;
  }

   /**
   * Recording format (wav, gsm, etc.)
   * @return format
  **/
  @ApiModelProperty(required = true, value = "Recording format (wav, gsm, etc.)")
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public LiveRecording targetUri(String targetUri) {
    this.targetUri = targetUri;
    return this;
  }

   /**
   * URI for the channel or bridge being recorded
   * @return targetUri
  **/
  @ApiModelProperty(required = true, value = "URI for the channel or bridge being recorded")
  public String getTargetUri() {
    return targetUri;
  }

  public void setTargetUri(String targetUri) {
    this.targetUri = targetUri;
  }

  public LiveRecording state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(required = true, value = "")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public LiveRecording duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Duration in seconds of the recording
   * @return duration
  **/
  @ApiModelProperty(value = "Duration in seconds of the recording")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }

  public LiveRecording talkingDuration(Integer talkingDuration) {
    this.talkingDuration = talkingDuration;
    return this;
  }

   /**
   * Duration of talking, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.
   * @return talkingDuration
  **/
  @ApiModelProperty(value = "Duration of talking, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.")
  public Integer getTalkingDuration() {
    return talkingDuration;
  }

  public void setTalkingDuration(Integer talkingDuration) {
    this.talkingDuration = talkingDuration;
  }

  public LiveRecording silenceDuration(Integer silenceDuration) {
    this.silenceDuration = silenceDuration;
    return this;
  }

   /**
   * Duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.
   * @return silenceDuration
  **/
  @ApiModelProperty(value = "Duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.")
  public Integer getSilenceDuration() {
    return silenceDuration;
  }

  public void setSilenceDuration(Integer silenceDuration) {
    this.silenceDuration = silenceDuration;
  }

  public LiveRecording cause(String cause) {
    this.cause = cause;
    return this;
  }

   /**
   * Cause for recording failure if failed
   * @return cause
  **/
  @ApiModelProperty(value = "Cause for recording failure if failed")
  public String getCause() {
    return cause;
  }

  public void setCause(String cause) {
    this.cause = cause;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveRecording liveRecording = (LiveRecording) o;
    return Objects.equals(this.name, liveRecording.name) &&
        Objects.equals(this.format, liveRecording.format) &&
        Objects.equals(this.targetUri, liveRecording.targetUri) &&
        Objects.equals(this.state, liveRecording.state) &&
        Objects.equals(this.duration, liveRecording.duration) &&
        Objects.equals(this.talkingDuration, liveRecording.talkingDuration) &&
        Objects.equals(this.silenceDuration, liveRecording.silenceDuration) &&
        Objects.equals(this.cause, liveRecording.cause);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, format, targetUri, state, duration, talkingDuration, silenceDuration, cause);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveRecording {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    targetUri: ").append(toIndentedString(targetUri)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    talkingDuration: ").append(toIndentedString(talkingDuration)).append("\n");
    sb.append("    silenceDuration: ").append(toIndentedString(silenceDuration)).append("\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

