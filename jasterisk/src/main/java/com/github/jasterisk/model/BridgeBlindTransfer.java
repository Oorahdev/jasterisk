/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.jasterisk.model;

import java.util.Objects;
import com.github.jasterisk.model.Bridge;
import com.github.jasterisk.model.Channel;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Notification that a blind transfer has occurred.
 */
@ApiModel(description = "Notification that a blind transfer has occurred.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-12-02T16:24:17.590+02:00")
public class BridgeBlindTransfer {
  @SerializedName("channel")
  private Channel channel = null;

  @SerializedName("replace_channel")
  private Channel replaceChannel = null;

  @SerializedName("transferee")
  private Channel transferee = null;

  @SerializedName("exten")
  private String exten = null;

  @SerializedName("context")
  private String context = null;

  @SerializedName("result")
  private String result = null;

  @SerializedName("is_external")
  private Boolean isExternal = null;

  @SerializedName("bridge")
  private Bridge bridge = null;

  public BridgeBlindTransfer channel(Channel channel) {
    this.channel = channel;
    return this;
  }

   /**
   * The channel performing the blind transfer
   * @return channel
  **/
  @ApiModelProperty(required = true, value = "The channel performing the blind transfer")
  public Channel getChannel() {
    return channel;
  }

  public void setChannel(Channel channel) {
    this.channel = channel;
  }

  public BridgeBlindTransfer replaceChannel(Channel replaceChannel) {
    this.replaceChannel = replaceChannel;
    return this;
  }

   /**
   * The channel that is replacing transferer when the transferee(s) can not be transferred directly
   * @return replaceChannel
  **/
  @ApiModelProperty(value = "The channel that is replacing transferer when the transferee(s) can not be transferred directly")
  public Channel getReplaceChannel() {
    return replaceChannel;
  }

  public void setReplaceChannel(Channel replaceChannel) {
    this.replaceChannel = replaceChannel;
  }

  public BridgeBlindTransfer transferee(Channel transferee) {
    this.transferee = transferee;
    return this;
  }

   /**
   * The channel that is being transferred
   * @return transferee
  **/
  @ApiModelProperty(value = "The channel that is being transferred")
  public Channel getTransferee() {
    return transferee;
  }

  public void setTransferee(Channel transferee) {
    this.transferee = transferee;
  }

  public BridgeBlindTransfer exten(String exten) {
    this.exten = exten;
    return this;
  }

   /**
   * The extension transferred to
   * @return exten
  **/
  @ApiModelProperty(required = true, value = "The extension transferred to")
  public String getExten() {
    return exten;
  }

  public void setExten(String exten) {
    this.exten = exten;
  }

  public BridgeBlindTransfer context(String context) {
    this.context = context;
    return this;
  }

   /**
   * The context transferred to
   * @return context
  **/
  @ApiModelProperty(required = true, value = "The context transferred to")
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }

  public BridgeBlindTransfer result(String result) {
    this.result = result;
    return this;
  }

   /**
   * The result of the transfer attempt
   * @return result
  **/
  @ApiModelProperty(required = true, value = "The result of the transfer attempt")
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }

  public BridgeBlindTransfer isExternal(Boolean isExternal) {
    this.isExternal = isExternal;
    return this;
  }

   /**
   * Whether the transfer was externally initiated or not
   * @return isExternal
  **/
  @ApiModelProperty(required = true, value = "Whether the transfer was externally initiated or not")
  public Boolean isIsExternal() {
    return isExternal;
  }

  public void setIsExternal(Boolean isExternal) {
    this.isExternal = isExternal;
  }

  public BridgeBlindTransfer bridge(Bridge bridge) {
    this.bridge = bridge;
    return this;
  }

   /**
   * The bridge being transferred
   * @return bridge
  **/
  @ApiModelProperty(value = "The bridge being transferred")
  public Bridge getBridge() {
    return bridge;
  }

  public void setBridge(Bridge bridge) {
    this.bridge = bridge;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BridgeBlindTransfer bridgeBlindTransfer = (BridgeBlindTransfer) o;
    return Objects.equals(this.channel, bridgeBlindTransfer.channel) &&
        Objects.equals(this.replaceChannel, bridgeBlindTransfer.replaceChannel) &&
        Objects.equals(this.transferee, bridgeBlindTransfer.transferee) &&
        Objects.equals(this.exten, bridgeBlindTransfer.exten) &&
        Objects.equals(this.context, bridgeBlindTransfer.context) &&
        Objects.equals(this.result, bridgeBlindTransfer.result) &&
        Objects.equals(this.isExternal, bridgeBlindTransfer.isExternal) &&
        Objects.equals(this.bridge, bridgeBlindTransfer.bridge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, replaceChannel, transferee, exten, context, result, isExternal, bridge);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BridgeBlindTransfer {\n");
    
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    replaceChannel: ").append(toIndentedString(replaceChannel)).append("\n");
    sb.append("    transferee: ").append(toIndentedString(transferee)).append("\n");
    sb.append("    exten: ").append(toIndentedString(exten)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    isExternal: ").append(toIndentedString(isExternal)).append("\n");
    sb.append("    bridge: ").append(toIndentedString(bridge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

